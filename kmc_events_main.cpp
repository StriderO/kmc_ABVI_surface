#include <cstdio>
#include <iostream>
#include <vector>
#include "kmc_global.h"
#include "kmc_events.h"

using namespace std;

double class_events::main(){
	// a probability map will first generated by calculating all possible moves
	// then randomly picked the ACTUAL move based on the probability map

	// defect information
	vector <int>    etype; // type of the event: 0: ITL JUMP; 1: VCC JUMP; 7: F-P GENR; 8: VCC CRTN
	vector <double> rates; // transition rates
	vector <int>    ilist; // IDs in the lists
	vector <int>	inbr;  // the index of nbr
	
	// perform imaginary jumps and cal rates
	double irates= cal_ratesI(etype, rates, ilist, inbr); // WARNING: irates before vrates so the recb map can be generated
	double vrates= cal_ratesVsp(etype, rates, ilist, inbr);
    double crates= cvcc_rates;
	double sum_rates= vrates + irates + crates; // sum of all rates
    if(is_genr){ // the genr event
        etype.push_back(7); 
        rates.push_back(rate_genr);
        sum_rates += rate_genr;
    }
    if(abs(sum_rates)<1e-10) error(2, "(main) rate= 0, end up simulation");

    // check
    if(nA+nB+nV+nAA+nBB+nAB+nM != nx*ny*nz) error(2, "(jump) numbers of ltc points arent consistent, diff=", 1, nA+nB+nV+nAA+nBB+nAB+nM-nx*ny*nz); // check
//    if(2*nAA+nA-nB-2*nBB       != sum_mag)  error(2, "(jump) magnitization isnt conserved", 2, 2*nAA+nA-nB-2*nBB, sum_mag);

    // perform the actual jump
	double ran= ran_generator();
        
    if(ran < crates/sum_rates){ // vcc creation
        double acc_cr= 0;
        for(auto it= cvcc.begin(); it != cvcc.end(); it ++){
            for(int a=0; a< (it->second).rates.size(); a ++){ // access creation paths of the atom
                double rate_a= (it->second).rates[a];
                if( (ran >= acc_cr) && (ran < (acc_cr + rate_a/sum_rates) ) ){
                    create_vcc(it->first, (it->second).mltcp[a]); 
                    goto actionDONE;
                }
                        
                acc_cr += rate_a/sum_rates;
            }
        }
    }
    else{ // jump & genr
	    double acc_rate= crates/sum_rates; // accumulated rate
	    for(int i=0; i<rates.size(); i ++){
            if( (ran >= acc_rate) && (ran < (acc_rate + rates[i]/sum_rates) ) ){			
		        switch(etype[i]){
                    case 0:  actual_jumpI(ilist[i], inbr[i]); recb_checki(ilist[i]); break;
			        case 1:  actual_jumpV(ilist[i], inbr[i]); break;
                    case 7:  genr(); N_genr ++; break;
                    default: error(2, "(main) an unknown event type", 1, etype[i]);
                }
                
                goto actionDONE;
            }
		    
            acc_rate += rates[i]/sum_rates;
        }
    }

actionDONE:
    return 1.0/sum_rates;
}

void class_events::actual_jumpV(int vid, int inbr){ // vcc id, neighbor ltcp and jumping atom
    int xv= (int) (list_vcc[vid].ltcp/nz)/ny; // vcc position
	int yv= (int) (list_vcc[vid].ltcp/nz)%ny;
	int zv= (int)  list_vcc[vid].ltcp%nz;
    if(states[xv][yv][zv] != 0) error(2, "(actual_jumpV) the jumping vcc is not a vcc (type)", 1, states[xv][yv][zv]);

	int x= pbc(xv+v1nbr[inbr][0], nx);
	int y= pbc(yv+v1nbr[inbr][1], ny);
	int z= pbc(zv+v1nbr[inbr][2], nz);
    if(states[x][y][z] != 1 && states[x][y][z] != -1) error(2, "(actual_jumpV) the jumping atom is not an atom (type)", 1, states[x][y][z]);
    
    if(states[x][y][z]==1)  Vja[0] ++; // track # of jumping atoms (see log file) 
    else                    Vja[1] ++;

	states[xv][yv][zv]= states[x][y][z];
	
    if(srf[x][y][z]){ // if jump into srf atom, becomes vacuum
        nV --;
        nM ++;

        states[x][y][z]= 4;
        srf[x][y][z]= false;
        
        if     (list_vcc[vid].njump < 0) {}
        else if(list_vcc[vid].njump > 9) njump[9] ++;
        else                             njump[list_vcc[vid].njump] ++;
        
        list_vcc.erase(list_vcc.begin()+vid);
    }
    else{
        states[x][y][z]= 0;
    	list_vcc[vid].ltcp= x*ny*nz + y*nz + z;
    	if((x-xv)>nx/2) list_vcc[vid].ix --; if((x-xv)<-nx/2) list_vcc[vid].ix ++;
    	if((y-yv)>ny/2) list_vcc[vid].iy --; if((y-yv)<-ny/2) list_vcc[vid].iy ++;
    	if((z-zv)>nz/2) list_vcc[vid].iz --; if((z-zv)<-nz/2) list_vcc[vid].iz ++;
    
        if(list_vcc[vid].njump != -1) list_vcc[vid].njump ++;
        
        recb_checkv(vid);
    }
    
    if(nM>0){ // update srf & creation
        srf_check(x, y, z);
        srf_check(xv, yv, zv);
        cvcc_rates += update_ratesC(x*ny*nz + y*nz + z);
        cvcc_rates += update_ratesC(xv*ny*nz+ yv*nz+ zv);
    }
}

void class_events::actual_jumpI(int iid, int inbr){
    int xi= (int) (list_itl[iid].ltcp/nz)/ny; // itl position
	int yi= (int) (list_itl[iid].ltcp/nz)%ny;
	int zi= (int)  list_itl[iid].ltcp%nz;
	if(2!=states[xi][yi][zi]) error(2, "(actual_jumpI) the jumping itl is not an itl (type)", 1, states[xi][yi][zi]);

    int x, y, z;
	x= pbc(xi+v1nbr[inbr][0], nx);
	y= pbc(yi+v1nbr[inbr][1], ny);
	z= pbc(zi+v1nbr[inbr][2], nz);
    if(states[x][y][z] != 1)  error(2, "(actual_jumpI) the jumping atom is not an atom (type)", 1, states[x][y][z]);
    
    Ija[0] ++;
	    
    states[x][y][z]= states[xi][yi][zi];
    states[xi][yi][zi]= 1;
	
	list_itl[iid].ltcp= x*ny*nz + y*nz + z;
    list_itl[iid].dir=  inbr;
//	    list_itl[iid].head= states[x][y][z] - jatom;
	
	if((x-xi)>nx/2) list_itl[iid].ix --; if((x-xi)<-nx/2) list_itl[iid].ix ++;
	if((y-yi)>ny/2) list_itl[iid].iy --; if((y-yi)<-ny/2) list_itl[iid].iy ++;
	if((z-zi)>nz/2) list_itl[iid].iz --; if((z-zi)<-nz/2) list_itl[iid].iz ++;

    if(nM>0){ // update srf & creation
        srf_check(x, y, z);
        srf_check(xi, yi, zi);
        cvcc_rates += update_ratesC(xi*ny*nz+ yi*nz+ zi);
        cvcc_rates += update_ratesC(x *ny*nz+ y *nz+ z);
    }
}
	
void class_events::create_vcc(int altcp, int mltcp){
	int ja= *(&states[0][0][0]+altcp);
    if(ja != 1 && ja != -1) error(2, "(create_vcc) an ja isnt 1 or -1", 1, ja);

    // initialize the vcc in the list_vcc
	int vid= list_vcc.size();
	list_vcc.push_back(vcc());
	
	list_vcc[vid].ltcp= altcp;
	list_vcc[vid].ix= 0;
	list_vcc[vid].iy= 0;
	list_vcc[vid].iz= 0;
    list_vcc[vid].njump= 0;

	// Update states
	*(&states[0][0][0]+mltcp)= ja;
	*(&states[0][0][0]+altcp)= 0;

    nV ++;
    nM --;

	int xa= (int) (altcp/nz)/ny; int ya= (int) (altcp/nz)%ny; int za= (int) altcp%nz;
	int xm= (int) (mltcp/nz)/ny; int ym= (int) (mltcp/nz)%ny; int zm= (int) mltcp%nz;
    srf_check(xa, ya, za);
    srf_check(xm, ym, zm);
    cvcc_rates += update_ratesC(altcp);
    cvcc_rates += update_ratesC(mltcp);
    recb_checkv(vid);
}
